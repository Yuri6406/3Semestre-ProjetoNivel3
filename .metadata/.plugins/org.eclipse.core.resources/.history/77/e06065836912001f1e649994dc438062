package cadastrobd.model;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import cadastro.model.util.ConectorBD;

public class PessoaFisicaDAO {

	PessoaFisica pessoaFisica = new PessoaFisica(0, null, null, null, null, null, null);

	PessoaJuridicaDAO pessoaJuridicaDao = new PessoaJuridicaDAO();
	PessoaJuridica pessoaJuridica = new PessoaJuridica(0, null, null, null, null, null, null, null);

	Scanner leia = new Scanner(System.in);

	static Connection conn = null;
	static PreparedStatement preparedStatemet = null;

	public void incluir(PessoaFisica pessoaFisica) {
		String sql = "INSERT INTO pessoafisica (idPessoa, nome, logradouro, cidade, estado, telefone, email,cpf) VALUES (?,?,?,?,?,?,?,?)";

		try {
			// Criar uma conex찾o com o banco de dados
			conn = ConectorBD.createConnectionToMySQL();

			// Criar uma preparedStatemet, para execultar uma query
			preparedStatemet = conn.prepareStatement(sql);

			preparedStatemet.setInt(1, pessoaFisica.getId());
			preparedStatemet.setString(2, pessoaFisica.getNome());
			preparedStatemet.setString(3, pessoaFisica.getLogradouro());
			preparedStatemet.setString(4, pessoaFisica.getCidade());
			preparedStatemet.setString(5, pessoaFisica.getEstado());
			preparedStatemet.setString(6, pessoaFisica.getTelefone());
			preparedStatemet.setString(7, pessoaFisica.getEmail());
			preparedStatemet.setString(8, pessoaFisica.getCpf());

			// Executar a query
			preparedStatemet.execute();

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			// Fechar as conex천es
			try {
				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	public List<PessoaFisica> getPessoas() throws ClassNotFoundException {
		List<PessoaFisica> pessoaFisica = new ArrayList<>();
		try {
			// Criar uma conex찾o com o banco de dados
			conn = ConectorBD.createConnectionToMySQL();
			// Criar uma preparedStatemet, para execultar uma query
			ResultSet resultSet = preparedStatemet.executeQuery("SELECT * FROM pessoafisica");
			while (resultSet.next()) {
				PessoaFisica pessoa = new PessoaFisica(0, null, null, null, null, null, null);
				pessoa.setId(resultSet.getInt("idPessoa"));
				pessoa.setNome(resultSet.getString("nome"));
				pessoa.setLogradouro(resultSet.getString("logradouro"));
				pessoa.setCidade(resultSet.getString("cidade"));
				pessoa.setEstado(resultSet.getString("estado"));
				pessoa.setTelefone(resultSet.getString("telefone"));
				pessoa.setEmail(resultSet.getString("email"));
				pessoa.setCpf(resultSet.getString("cpf"));
				pessoaFisica.add(pessoa);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return pessoaFisica;
	}

	public PessoaFisica getPessoa(int id) throws ClassNotFoundException, SQLException {

		// Criar uma conex찾o com o banco de dados
		conn = ConectorBD.createConnectionToMySQL();

		PessoaFisica pessoa = new PessoaFisica(id, null, null, null, null, null, null);
		try {
			PreparedStatement preparedStatement = conn.prepareStatement("SELECT * FROM pessoafisica WHERE idPessoa=?");
			preparedStatement.setInt(1, id);
			ResultSet resultSet = preparedStatement.executeQuery();

			if (resultSet.next()) {
				pessoa.setId(resultSet.getInt("idPessoa"));
				pessoa.setNome(resultSet.getString("nome"));
				pessoa.setLogradouro(resultSet.getString("logradouro"));
				pessoa.setCidade(resultSet.getString("cidade"));
				pessoa.setEstado(resultSet.getString("estado"));
				pessoa.setTelefone(resultSet.getString("telefone"));
				pessoa.setEmail(resultSet.getString("email"));
				pessoa.setCpf(resultSet.getString("cpf"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return pessoa;
	}

	public void alterar(PessoaFisica pessoaFisica) {
		try {
			PreparedStatement preparedStatement = conn.prepareStatement(
					"UPDATE pessoafisica SET nome=?, logradouro=?, cidade=?, estado=?, telefone=? , email=?, cpf=? WHERE idPessoa=?");
			preparedStatement.setString(1, pessoaFisica.getNome());
			preparedStatement.setString(2, pessoaFisica.getLogradouro());
			preparedStatement.setString(3, pessoaFisica.getCidade());
			preparedStatement.setString(4, pessoaFisica.getEstado());
			preparedStatement.setString(5, pessoaFisica.getTelefone());
			preparedStatement.setString(6, pessoaFisica.getEmail());
			preparedStatement.setInt(7, pessoaFisica.getId());
			preparedStatement.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void excluir(PessoaFisica pessoaFisica) {
		try {
			PreparedStatement preparedStatement = conn.prepareStatement("DELETE FROM pessoafisica WHERE idPessoa=?");
			preparedStatement.setInt(1, pessoaFisica.getId());
			preparedStatement.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void InserindoPessoa() {
		System.out.println("Nome: ");
		String nome = leia.nextLine();
		pessoaFisica.setNome(nome);
		System.out.println("Logradouro: ");
		String logradouro = leia.nextLine();
		pessoaFisica.setLogradouro(logradouro);
		System.out.println("Cidade: ");
		String cidade = leia.nextLine();
		pessoaFisica.setCidade(cidade);
		System.out.println("Estado: ");
		String estado = leia.nextLine();
		pessoaFisica.setEstado(estado);
		System.out.println("Telefone: ");
		String telefone = leia.nextLine();
		pessoaFisica.setTelefone(telefone);
		System.out.println("Email: ");
		String email = leia.nextLine();
		pessoaFisica.setEmail(email);
		System.out.println("CPF: ");
		String cpf = leia.nextLine();
		pessoaFisica.setCpf(cpf);

		pessoaFisicaDao.incluir(pessoaFisica);
		System.out.println("Cadastrando Pessoa Fisica");

	}

}
